openapi: 3.0.3
info:
  title: Multi-Tenant Gateway API
  version: 1.0.0
  description: API untuk autentikasi, manajemen tenant, service gateway, dan proxy antar layanan.
servers:
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Auth
    description: Autentikasi dan registrasi pengguna
  - name: Admin
    description: Manajemen tenant dan user oleh superadmin
  - name: Gateway
    description: Pengaturan service, rate limit, dan permission
  - name: Proxy
    description: Dynamic proxy untuk service antar-tenant

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Error message here

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password, tenant]
              properties:
                username: { type: string, example: superadmin }
                password: { type: string, example: supersecretpassword }
                tenant: { type: string, example: default }
      responses:
        "200":
          description: Login sukses
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
        "400":
          {
            description: Bad request,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/ErrorResponse" } },
              },
          }
        "401":
          {
            description: Unauthorized,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/ErrorResponse" } },
              },
          }

  /auth/register:
    post:
      tags: [Auth]
      summary: Registrasi user baru (oleh superadmin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password, role]
              properties:
                username: { type: string, example: admin }
                password: { type: string, example: admin }
                role: { type: string, example: admin }
      responses:
        "200": { description: User registered }
        "403":
          {
            description: Forbidden,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/ErrorResponse" } },
              },
          }
        "409":
          {
            description: Conflict,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/ErrorResponse" } },
              },
          }

  /admin/tenants:
    get:
      tags: [Admin]
      summary: Lihat semua tenant
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenants:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        name: { type: string }

  /admin/users/{tenantId}:
    get:
      tags: [Admin]
      summary: Lihat user tenant
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: tenantId
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        username: { type: string }
                        role: { type: string }

  /admin/users/{tenantId}/role:
    post:
      tags: [Admin]
      summary: Update role user tenant
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: tenantId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, role]
              properties:
                userId: { type: string }
                role: { type: string }
      responses:
        "200": { description: User role updated }
        "400":
          {
            description: Bad request,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/ErrorResponse" } },
              },
          }
        "404":
          {
            description: Not found,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/ErrorResponse" } },
              },
          }

  /gateway/services:
    get:
      tags: [Gateway]
      summary: List semua services tenant
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  services:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        name: { type: string }
                        version: { type: string }
                        target: { type: string }
                        rate_limit: { type: integer }

  /api/docs/{version}/{serviceName}/swagger.json:
    get:
      tags: [Proxy]
      summary: Ambil Swagger JSON dari service
      parameters:
        - in: path
          name: version
          required: true
          schema: { type: string }
        - in: path
          name: serviceName
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Swagger JSON
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/{version}/{serviceName}/{any*}:
    get:
      tags: [Proxy]
      summary: Proxy dinamis ke target service
      parameters:
        - in: path
          name: version
          required: true
          schema: { type: string }
        - in: path
          name: serviceName
          required: true
          schema: { type: string }
        - in: path
          name: any*
          required: false
          schema: { type: string }
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Proxied response }
        "404": { description: Service not found }
        "500": { description: Proxy error }
